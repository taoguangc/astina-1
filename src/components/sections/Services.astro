---
import { Image } from 'astro:assets'
import { getImage } from '../../utils/image'

interface Props {
  title?: string
  subTitle?: string
  image?: string
  items: {
    title: string
    description: string
    serviceImage?: string
  }[]
}

const { title = '', subTitle = '', image = '', items = [] } = Astro.props

// 统一处理所有图片
const processImages = async (images: (string | undefined)[]) => {
  return Promise.all(images.map((img) => (img ? getImage(img) : null)))
}

const [processedImage, ...processedServiceImages] = await processImages([image, ...items.map((item) => item.serviceImage)])
---

<section class="relative container mx-auto px-4 py-20 md:min-h-screen md:px-0">
  <div class="flex flex-col md:flex-row md:gap-32">
    <div class="mb-12 w-full md:w-5/12" data-inview="left" data-delay="0">
      <h6 class="mb-6 text-gray-600">{subTitle}</h6>
      <h2 class="mb-12 text-3xl font-bold md:text-4xl">{title}</h2>
      <div class="flex flex-col gap-8">
        {
          items.map((item, index) => (
            <div class="flex flex-row items-center border-b border-gray-300 pb-8" data-inview="bottom" data-delay={(index * 0.2).toString()}>
              {processedServiceImages[index] && <Image src={processedServiceImages[index]} alt={item.title} width={50} height={50} class="mr-16" />}
              <div>
                <h3 class="pb-4 text-xl font-semibold">{item.title}</h3>
                <p class="max-w-72 text-gray-600">{item.description}</p>
                <a href="#" class="mt-4 inline-block text-blue-600 hover:text-blue-800">
                  Learn More →
                </a>
              </div>
            </div>
          ))
        }
      </div>
    </div>
    <div class="w-full md:w-5/12">
      {processedImage && <Image src={processedImage} alt={title} width="600" height="900" class="parallax w-full" />}
    </div>
  </div>
</section>

<script>
  import { animate, scroll } from 'motion'

  document.querySelectorAll('.parallax').forEach((item) => {
    scroll(animate(item, { y: [300, -300] }, { ease: 'linear' }), {
      target: item,
      offset: ['start end', 'end start']
    })
  })
</script>
